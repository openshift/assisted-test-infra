pipeline {
    agent { label 'test-infra' }

    parameters {
        booleanParam(name: 'NOTIFY', defaultValue: true, description: 'Notify on fail (on master branch)')
    }

    environment {
        SKIPPER_PARAMS = " "
        NAMESPACE = "assisted-installer"
        E2E_TESTS_MODE="true"

        /* Credentials */
        PULL_SECRET = credentials('assisted-test-infra-pull-secret')
        OCPMETAL_CREDS = credentials('docker_ocpmetal_cred')
        BASE_DNS_DOMAINS = credentials('route53_dns_domain')
        ROUTE53_SECRET = credentials('route53_secret')
        SLACK_TOKEN = credentials('slack-token')
    }
    options {
      timeout(time: 5, unit: 'HOURS')
    }

    stages {
        stage('Init') {
            steps {
                sh "make image_build"
                sh "make create_full_environment"

                // Login
                sh "minikube ssh \"docker login --username ${OCPMETAL_CREDS_USR} --password ${OCPMETAL_CREDS_PSW}\""
            }
        }

        stage('Test') {
            steps {
                sh "make run"
                sh "make test"
            }
            post {
                always {
                    junit '**/reports/*test.xml'
                }
            }
        }
    }

    post {
         always {
            script {
                if ((env.BRANCH_NAME == 'master') && env.NOTIFY && (currentBuild.currentResult == "ABORTED" || currentBuild.currentResult == "FAILURE")){
                    script {
                        def data = [text: "Attention! ${BUILD_TAG} job failed, see: ${BUILD_URL}"]
                        writeJSON(file: 'data.txt', json: data, pretty: 4)
                    }
                    sh '''curl -X POST -H 'Content-type: application/json' --data-binary "@data.txt"  https://hooks.slack.com/services/${SLACK_TOKEN}'''
                }

                try {
                    for (service in ["assisted-service","postgres","object-store","createimage"]) {
                        sh "kubectl get pods -o=custom-columns=NAME:.metadata.name -A | grep ${service} | xargs -r -I {} sh -c \"kubectl logs {} -n ${NAMESPACE} > {}.log\" || true"
                    }
                } finally {
                    sh "make destroy"
                }
            }

            archiveArtifacts artifacts: '*.log', fingerprint: true
        }
    }
}
