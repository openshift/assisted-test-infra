- name: Load terraform state
  ansible.builtin.command:
    cmd: terraform show -json
    chdir: "{{ terraform_working_dir }}"
  register: terraform_state
  check_mode: false
  changed_when: false

- name: Convert terraform state to dict
  ansible.builtin.set_fact:
    terraform_resources: "{{ (terraform_state.stdout | from_json)['values']['root_module']['resources'] | default([]) }}"
    excluded_resources: []

- name: Exclude types from terraform state
  ansible.builtin.set_fact:
    excluded_resources: "{{ excluded_resources + [item] }}"
  loop: "{{ terraform_resources }}"
  when: item.type in excluded_types

- name: Exclude recently created resources from terraform state
  ansible.builtin.set_fact:
    excluded_resources: "{{ excluded_resources + [item] }}"
  loop: "{{ terraform_resources }}"
  when:
    - item["values"]["defined_tags"]["Oracle-Tags.CreatedOn"] is defined
    - >-
        (
          now(utc=true).replace(tzinfo=None)
          -
          (item["values"]["defined_tags"]["Oracle-Tags.CreatedOn"] | ansible.builtin.to_datetime("%Y-%m-%dT%H:%M:%S.%fZ")).replace(tzinfo=None)
        ).total_seconds() / 3600 < expired_after_hours

- name: Remove excluded resources from terraform state
  ansible.builtin.command:
    cmd: terraform state rm {{ excluded_resources | json_query('[].address') | unique | join(" ") }}
    chdir: "{{ terraform_working_dir }}"
  when: excluded_resources | length > 0
  changed_when: true

- name: Destroy expired resources
  community.general.terraform:
    project_path: "{{ terraform_working_dir }}"
    state: absent
  register: result
  until: "result is not failed"
  retries: 10
  delay: 10
