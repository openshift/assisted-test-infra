- name: Look for OCI provider binaries
  ansible.builtin.find:
    paths: "{{ oci_terraform_workdir }}/.terraform/providers"
    file_type: file
    patterns: "terraform-provider-oci_*"
    recurse: true
  register: found_providers

- name: Select OCI provider binary
  ansible.builtin.set_fact:
    oci_provider_bin: "{{ (found_providers.files | first).path }}"

- name: Create temporary directory where resources will be imported as terraform files
  ansible.builtin.tempfile:
    state: directory
    suffix: terraform
  register: terraform_working_tmp_dir
  when: terraform_working_dir is not defined

- name: Set terraform_working_dir
  ansible.builtin.set_fact:
    terraform_working_dir: "{{ terraform_working_tmp_dir.path }}"
  when: terraform_working_dir is not defined

- name: Import OCI resources
  ansible.builtin.command:
    cmd: >-
      {{ oci_provider_bin }}
        -command=export
        -compartment_id={{ oci_compartment_id }}
        -output_path=.
        -services=core,load_balancer,network_load_balancer,identity,object_storage,tagging
        -generate_state
    creates: "terraform.tfstate"
    chdir: "{{ terraform_working_dir }}"
  check_mode: false

- name: Check terraform state file
  ansible.builtin.stat:
    path: "{{ [terraform_working_dir, 'terraform.tfstate'] | path_join }}"
  register: terraform_state_file_result

- name: Cleanup resources when a terraform state file exists
  ansible.builtin.include_tasks:
    file: cleanup_resources.yml
  when: terraform_state_file_result.stat.exists
