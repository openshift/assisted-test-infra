- name: "Save terraform variables into {{ oci_tf_vars_file }}"
  ansible.builtin.template:
    src: "terraform.tfvars.j2"
    dest: "{{ oci_tf_vars_file }}"
    mode: 0644

- name: "Deploy Terraform Instance"
  community.general.terraform:
    project_path: "{{ oci_terraform_workdir }}"
    state: present
    force_init: true
    variables_files:
      - "{{ oci_tf_vars_file }}"
  register: deployed_tf

- name: "Save Terraform state file in {{ oci_tf_state_file }}"
  ansible.builtin.copy:
    src: "{{ oci_terraform_workdir }}/terraform.tfstate"
    dest: "{{ oci_tf_state_file }}"
    mode: 0644
  when: oci_tf_state_file is defined

- name: "Add ci_machine to inventory"
  ansible.builtin.add_host:
    name: "{{ deployed_tf.outputs.ci_machine_inventory.value.display_name }}"
    ansible_host: "{{ deployed_tf.outputs.ci_machine_inventory.value.public_ip }}"
    ansible_user: "{{ deployed_tf.outputs.ci_machine_inventory.value.user }}"
    ansible_ssh_private_key_file: "{{ deployed_tf.outputs.ci_machine_inventory.value.ssh_private_key_path }}"
    groups: "primary"

- name: Collect facts from added host
  ansible.builtin.setup:
  delegate_to: "{{ deployed_tf.outputs.ci_machine_inventory.value.display_name }}"
  delegate_facts: true
  retries: 5
  delay: 30
  register: result
  until: result is succeeded
